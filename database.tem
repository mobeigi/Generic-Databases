// Database class implementation

/*
* Writes records to stream in insertion order.
* Required Record class to have << implemented.
* Complexity: O(n) regardless of scope, comparison still made on all records with scope SelectedRecords
*/

template <class value>
void Database<value>::write(ostream& out, DBScope scope) const {

  //Check to see if any records are selected
  if (numSelected_ == 0 && scope == SelectedRecords) {
    out << "No records selected" << endl;
    return;
  }

  //Iterate over records, printing them out in definition order
  //Print either selected records or all records based on scope
  for (auto it = records.begin(); it != records.end(); ++it) {
    if (scope == AllRecords || (scope == SelectedRecords && it->isSelected())) {
      out << *it << endl;
    }
  }
}

/*
* Read values from input stream and detect and store all valid records.
* Complexity: O(n)
*/
template <class value>
void Database<value>::read(istream& in) {

  //Delete current records
  records.clear();
  numSelected_ = 0;

  Record<value> r;

  //Read records from stream until stream is exhausted
  //Our >> operator on Records ensures each read will read 1 record unless of course eof is reached
  while (in >> r) {
      records.push_back(r);
  }

}

/*
* Delete all records based on provides scope
*
* Complexity: O(n) regardless of scope
*/
template <class value>
void Database<value>::deleteRecords(DBScope scope) {
  switch (scope) {

  //Delete all records
  case AllRecords:
    records.clear();  //destructor takes care of memory
    numSelected_ = 0;
    break;

  //Delete Selected Records
  case SelectedRecords:
    for (auto it = records.begin(); it != records.end(); ) {

      //If record is selected
      if (it->isSelected()) {
        //Set iterator to location of next item while deleting this item from the list
        it = records.erase(it);
        --numSelected_; //we have one less record in the database now
      }
      //Otherwise, iterate onto next element
      else {
        ++it;
      }
    }

    break;
  }
}

/*
* Select all records.
* Complexity: O(n) - Iterate through all records, and setSelected on every record
*/
template <class value>
void Database<value>::selectAll() {
  for (auto it = records.begin(); it != records.end(); ++it) {
    it->setSelected(true);
  }

  //Set numSelected_ to correct value
  numSelected_ = records.size();
}

/*
* Deselect all records.
* Complexity: O(n) - Iterate through all records, and setSelected on every record
*/
template <class value>
void Database<value>::deselectAll() {
  for (auto it = records.begin(); it != records.end(); ++it) {
    it->setSelected(false);
  }

  //Set numSelected_ to correct value
  numSelected_ = 0;
}

/*
* Operation to select some of the records in the database.
*
* Complexity: O(n) - Iterate through all records performing various operations
*/
template <class value>
void Database<value>::select(DBSelectOperation selOp, const string& attr, DBQueryOperator op, const value& val) {
  //Iterate over records
  for (auto it = records.begin(); it != records.end(); ++it) {
    //Check for record match
    bool matched = it->matchesQuery(attr, op, val);

    switch (selOp) {
    case Add:
      //Add operates on unselected records
      if (matched && !it->isSelected()) {
        it->setSelected(true);
        numSelected_++;
      }
      break;

      //Remove operates on selected records
    case Remove:
      if (matched && it->isSelected()) {
        it->setSelected(false);
        numSelected_--;
      }
      break;

    case Refine:
      //If not matched and selected, then deselect it
      if (!matched && it->isSelected() ) {
        it->setSelected(false);
        numSelected_--;
      }
      break;

    default:
      break;
    }
  }
}
